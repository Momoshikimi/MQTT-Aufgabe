#include <WiFi.h>
#include <DHT.h>
#include <ArduinoJson.h>
#include <PubSubClient.h>

                                             // WiFi-Konfigurationsdaten
const char* ssid = "Wokwi-GUEST";            // Dein WLAN-SSID
const char* password = "";                   // Dein WLAN-Passwort

                                             // MQTT-Konfigurationsdaten
const char* mqtt_server = "broker.emqx.io";  // Adresse des MQTT-Servers
const int mqtt_port = 1883;                  // Port des MQTT-Servers (standardmäßig 1883)
const char* topic = "sensor/daten";          // Das MQTT-Thema, auf dem die Daten veröffentlicht und abonniert werden

#define DHTPIN 4                             // Anschluss des DHT-Sensors an Pin 4
#define DHTTYPE DHT22                        // Typ des DHT-Sensors
const int sensorPin = 2;                     // Anschluss des Sensors an Pin 2 des ESP32

DHT dht(DHTPIN, DHTTYPE);                   // DHT-Sensor-Objekt
StaticJsonDocument<200> jsonData;           // JSON-Dokument erstellen
WiFiClient espClient;
PubSubClient client(espClient);             // MQTT-Client-Objekt

                                            // WiFi-Verbindung initialisieren
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Verbinden mit ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi verbunden.");
  Serial.print("IP Adresse: ");
  Serial.println(WiFi.localIP());
}

                                              // Callback-Funktion für MQTT-Nachrichten
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Nachricht angekommen [");
  Serial.print(topic);
  Serial.print("]: ");
  
                                              // Payload in einen String umwandeln
  char message[length + 1];
  for (unsigned int i = 0; i < length; i++) {
    message[i] = (char)payload[i];
  }
  message[length] = '\0';
  Serial.println(message);

                                              // JSON-Daten deserialisieren und ausgeben
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, message);
  if (error) {
    Serial.print("Fehler beim Deserialisieren: ");
    Serial.println(error.f_str());
    return;
  }
}

                                              // Verbindung zum MQTT-Server herstellen
void reconnect() {
  while (!client.connected()) {
    Serial.print("Verbinden mit MQTT-Server ...");
    if (client.connect("ESP32Client")) {
      Serial.println("verbunden");

                                              // Auf das MQTT-Thema abonnieren
      client.subscribe(topic);
    } else {
      Serial.print("Fehler, rc=");
      Serial.print(client.state());
      Serial.println(" in 5 Sekunden erneut versuchen");
      delay(5000);
    }
  }
}

                                              // Setup-Funktion für Initialisierung
void setup() {
  pinMode(sensorPin, INPUT);                  // Sensor-Pin als Eingang setzen
  Serial.begin(9600);                         // Serielle Kommunikation mit Baudrate 9600 starten
  dht.begin();                                // DHT-Sensor initialisieren
  delay(2000);                                // Wartezeit nach DHT-Sensor-Initialisierung für Stabilität
  Serial.println("Setup abgeschlossen. Sensoren initialisiert.");
  
  setup_wifi();                               // WiFi initialisieren
  client.setServer(mqtt_server, mqtt_port);   // MQTT-Server konfigurieren
  client.setCallback(callback);               // Callback-Funktion für MQTT-Nachrichten setzen
}

                                              // Variablen für Zeitsteuerung und Bewegungserkennung
int timeBewegung = 11;
int timeSendung = 0;
bool Bewegung = false;

                                              //  Loop-Funktion für die Hauptausführung
void loop() {
  if (!client.connected()) {
    reconnect();                              // MQTT-Verbindung wiederherstellen
  }
  client.loop();                              // MQTT-Client-Schleife ausführen

  delay(1000);                                // Kurze Pause zwischen den Schleifen

                                              // Luftfeuchtigkeit und Temperatur vom DHT-Sensor lesen

  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  
                                              // Fehlerprüfung der Sensorwerte

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Fehler beim Lesen des DHT-Sensors!");
    return;
  }
  
                                              // Sensorwerte auf der seriellen Schnittstelle ausgeben

  Serial.print("Luftfeuchtigkeit: ");
  Serial.print(humidity);
  Serial.print("%, Temperatur: ");
  Serial.print(temperature);
  Serial.println("°C");

                                              // Bewegungssensor prüfen

  if (digitalRead(sensorPin) == HIGH) {
    if (timeBewegung == 10) {
      timeBewegung = 0; 
      Bewegung = true;
      Serial.println("Bewegung erkannt.");
    } else {
      timeBewegung++; 
      Bewegung = true;
    }
  } else {
    Bewegung = false;
    timeBewegung = 0;
    Serial.println("Keine Bewegung.");
  }
  
                                               // Zeitintervall für das Senden der Daten überprüfen
  if (timeSendung == 60) {

                                               // JSON-String erstellen
    String jsonString = createJson(humidity, temperature, Bewegung);

                                               // Veröffentlichen der Daten auf dem MQTT-Server
    if (client.publish(topic, jsonString.c_str())) {
      Serial.println("Daten erfolgreich gesendet.");
    } else {
      Serial.println("Fehler beim Senden der Daten.");
    }

    timeSendung = 0;                            // Zeitvariable zurücksetzen
  } else {
    timeSendung++;
  }
}

                                                // Funktion zum Erstellen eines JSON-Strings aus den Sensorwerten
String createJson(float humidity, float temperature, bool Bewegung) {

                                                // JSON-Daten füllen
  jsonData["schule"] = "HWS";
  jsonData["bau"] = "C";
  jsonData["stock"] = "1.OG";
  jsonData["raum"] = "107";
  jsonData["temperatur"] = temperature;
  jsonData["luftfeuchtigkeit"] = humidity;
  jsonData["anwesenheit"] = Bewegung;           // Verfügbarkeit von Personen

                                                // JSON-Dokument serialisieren und als String zurückgeben
  String jsonString;
  serializeJson(jsonData, jsonString);
  return jsonString;
}
